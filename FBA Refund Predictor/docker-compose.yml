version: '3.8'

networks:
  fba-network:
    driver: bridge
  monitoring-network:
    driver: bridge

services:
  # PostgreSQL Database (shared)
  postgres:
    image: postgres:15-alpine
    container_name: fba-postgres
    environment:
      POSTGRES_DB: fba_refund_predictor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fba-network
      - monitoring-network

  # Redis (shared cache)
  redis:
    image: redis:7-alpine
    container_name: fba-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fba-network
      - monitoring-network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: fba-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - fba-network
      - monitoring-network

  # Cost Documentation Module API
  cost-docs-api:
    build: ./cost-documentation-module
    container_name: cost-docs-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fba_refund_predictor
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioadmin}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-fba-cost-documents}
      - MCDE_API_BASE_URL=http://mcde:8000
      - MCDE_API_KEY=${MCDE_API_KEY:-dev-key}
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./cost-documentation-module/logs:/app/logs
    restart: unless-stopped
    networks:
      - fba-network
      - monitoring-network

  # MCDE Service (Cost Estimation)
  mcde:
    build: ./mcde
    container_name: mcde-service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fba_refund_predictor
      - REDIS_URL=redis://redis:6379
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET=fba-cost-documents
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./mcde/logs:/app/logs
    restart: unless-stopped
    networks:
      - fba-network
      - monitoring-network

  # FBA Refund Predictor API (ML Service)
  fba-predictor:
    build: ./FBA Refund Predictor
    container_name: fba-predictor-api
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fba_refund_predictor
      - REDIS_URL=redis://redis:6379
      - COST_DOCS_API_URL=http://cost-docs-api:3001
      - MCDE_API_URL=http://mcde:8000
      - REFUND_ENGINE_URL=http://refund-engine:3000
      - MODEL_PATH=/app/models/ensemble_model.pkl
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      cost-docs-api:
        condition: service_started
      mcde:
        condition: service_started
    volumes:
      - ./FBA Refund Predictor/models:/app/models
      - ./FBA Refund Predictor/logs:/app/logs
    restart: unless-stopped
    networks:
      - fba-network
      - monitoring-network

  # Refund Engine API
  refund-engine:
    build: ./refund-engine
    container_name: refund-engine-api
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fba_refund_predictor
      - REDIS_URL=redis://redis:6379
      - FBA_PREDICTOR_URL=http://fba-predictor:8000
      - COST_DOCS_API_URL=http://cost-docs-api:3001
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - NODE_ENV=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      fba-predictor:
        condition: service_started
    volumes:
      - ./refund-engine/logs:/app/logs
    restart: unless-stopped
    networks:
      - fba-network
      - monitoring-network

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: fba-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring-network
    restart: unless-stopped

  # Grafana (Monitoring Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: fba-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - monitoring-network
    restart: unless-stopped

  # Nginx (API Gateway & Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: fba-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - cost-docs-api
      - mcde
      - fba-predictor
      - refund-engine
    networks:
      - fba-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
