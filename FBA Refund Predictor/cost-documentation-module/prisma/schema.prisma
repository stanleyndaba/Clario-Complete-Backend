// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CostDocument {
  id              String    @id @default(uuid())
  claimId         String
  skuId           String
  fileKey         String    // S3 object key
  originalName    String
  fileType        String
  fileSize        Int
  metadata        Json      // extracted metadata like invoiceNumber, cost, date, etc.
  version         Int       @default(1)
  uploadedAt      DateTime  @default(now())
  uploadedBy      String    // userId
  isActive        Boolean   @default(true)
  
  // Relations
  auditLogs       AuditLog[]
  detectionResults DetectionResult[]
  
  // Indexes for performance
  @@index([claimId])
  @@index([skuId])
  @@index([uploadedBy])
  @@index([uploadedAt])
  @@index([fileType])
}

model AuditLog {
  id          String   @id @default(uuid())
  costDocId   String
  action      String   // UPLOAD, UPDATE, DELETE, VERSION_UPDATE
  performedBy String
  timestamp   DateTime @default(now())
  details     Json?    // Additional details about the action

  // Relations
  costDocument CostDocument @relation(fields: [costDocId], references: [id])
  
  // Indexes
  @@index([costDocId])
  @@index([action])
  @@index([performedBy])
  @@index([timestamp])
}

model Claim {
  id          String   @id @default(uuid())
  claimNumber String   @unique
  userId      String
  status      String   @default("pending") // pending, approved, rejected, processing
  amount      Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Evidence & Value Engine fields
  anomaly_score Float?
  claim_type    String?
  proof_bundle_id String?
  
  // Relations
  proofBundle  ProofBundle? @relation(fields: [proof_bundle_id], references: [id])
  evidenceLinks EvidenceLink[]
  
  // Relations
  detectionJobs DetectionJob[]
  
  // Indexes
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Evidence & Value Engine
model EvidenceLink {
  id           String   @id @default(uuid())
  claim_id     String
  ocr_text     String   @db.Text
  ner_entities Json     // extracted fields
  created_at   DateTime @default(now())

  claim        Claim    @relation(fields: [claim_id], references: [id])

  @@index([claim_id])
}

model ProofBundle {
  id           String   @id @default(uuid())
  payload      Json     // original tx record + ocr/ner evidence
  hash         String   // sha256(payload + timestamp + actor_id)
  timestamp    DateTime @default(now())
  actor_id     String
  created_at   DateTime @default(now())

  // backref
  claims       Claim[]

  @@index([hash])
  @@index([actor_id])
}

model SKU {
  id          String   @id @default(uuid())
  skuCode     String   @unique
  name        String
  category    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  detectionResults DetectionResult[]
  
  // Indexes
  @@index([skuCode])
  @@index([userId])
  @@index([category])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  role      String   @default("user") // user, admin, agent
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  detectionJobs DetectionJob[]
  
  // Indexes
  @@index([email])
  @@index([role])
}

// Detection Pipeline Models

model DetectionJob {
  id            String   @id @default(uuid())
  sellerId      String   // Amazon seller ID
  syncId        String   // Unique identifier for the sync operation
  status        DetectionJobStatus @default(PENDING)
  priority      DetectionPriority @default(NORMAL)
  attempts      Int      @default(0)
  lastError     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  detectionResults DetectionResult[]
  
  // Indexes
  @@index([sellerId])
  @@index([syncId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
}

model DetectionResult {
  id              String   @id @default(uuid())
  sellerId        String
  syncId          String
  ruleType        RuleType
  severity        AnomalySeverity
  score           Float    // 0.0 to 1.0 confidence score
  summary         String
  evidenceJson    Json     // Deterministic evidence object
  evidenceS3Url   String   // S3 artifact URL
  dedupeHash      String   // Hash for deduplication
  createdAt       DateTime @default(now())
  
  // Relations
  detectionJob   DetectionJob @relation(fields: [detectionJobId], references: [id])
  detectionJobId String
  
  // Indexes
  @@index([sellerId])
  @@index([syncId])
  @@index([ruleType])
  @@index([dedupeHash])
  @@unique([sellerId, ruleType, dedupeHash])
}

model DetectionThreshold {
  id          String   @id @default(uuid())
  sellerId    String?  // null for global thresholds
  ruleType    RuleType
  operator    ThresholdOperator
  value       Decimal
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Indexes
  @@index([sellerId])
  @@index([ruleType])
  @@index([active])
}

model DetectionWhitelist {
  id          String   @id @default(uuid())
  sellerId    String
  scope       WhitelistScope
  value       String   // SKU, ASIN, vendor, or shipment identifier
  reason      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Indexes
  @@index([sellerId])
  @@index([scope])
  @@index([value])
  @@index([active])
}

// Enums

enum DetectionJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DetectionPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum RuleType {
  LOST_UNITS
  OVERCHARGED_FEES
  DAMAGED_STOCK
  DUPLICATE_CHARGES
  INVALID_SHIPPING
  PRICING_DISCREPANCY
}

enum AnomalySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ThresholdOperator {
  GT
  GTE
  LT
  LTE
  EQ
}

enum WhitelistScope {
  SKU
  ASIN
  VENDOR
  SHIPMENT
}

// Cost Documentation Models

model CostDocumentationJob {
  id              String   @id @default(uuid())
  evidence        Json     // AnomalyEvidence object
  status          JobStatus @default(PENDING)
  priority        JobPriority @default(NORMAL)
  attempts        Int      @default(0)
  max_attempts    Int      @default(3)
  error_message   String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  completed_at    DateTime?
  pdf_url         String?
  pdf_s3_key      String?
  
  // Indexes
  @@index([status])
  @@index([priority])
  @@index([created_at])
}

model GeneratedPDF {
  id                String   @id @default(uuid())
  anomaly_id        String
  seller_id         String
  pdf_s3_key        String
  pdf_url           String
  template_used     String
  template_version  String   @default("1.0")
  generated_at      DateTime @default(now())
  file_size         Int
  content_hash      String   // SHA256 hash of final PDF content
  linked_tx_ids     String[] // Array of related transaction IDs from detection pipeline
  status            DocumentStatus @default(DRAFT)
  locked_at         DateTime?
  locked_by         String?
  exported_at       DateTime?
  exported_by       String?
  export_bundle_id  String?  // Reference to export bundle if exported
  metadata          Json     // Additional metadata
  
  // Relations
  auditLogs         CostDocAuditLog[]
  exportBundles     ExportBundleItem[]
  
  // Indexes
  @@index([anomaly_id])
  @@index([seller_id])
  @@index([generated_at])
  @@index([status])
  @@index([content_hash])
  @@index([locked_at])
  @@index([exported_at])
}

model PDFTemplate {
  id              String   @id @default(uuid())
  name            String
  anomaly_type    String
  template_html   String   @db.Text
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Indexes
  @@index([anomaly_type])
  @@index([is_active])
}

// Audit Trail for Cost Documentation
model CostDocAuditLog {
  id          String   @id @default(uuid())
  doc_id      String
  timestamp   DateTime @default(now())
  actor       String   // User ID who performed the action
  event       AuditEvent
  prev_hash   String?  // Previous content hash (if applicable)
  new_hash    String?  // New content hash (if applicable)
  details     Json?    // Additional details about the action
  
  // Relations
  document    GeneratedPDF @relation(fields: [doc_id], references: [id])
  
  // Indexes
  @@index([doc_id])
  @@index([event])
  @@index([timestamp])
  @@index([actor])
}

// Export Bundle Management
model ExportBundle {
  id              String   @id @default(uuid())
  name            String   // Human-readable name for the export
  description     String?
  created_by      String   // User ID who created the export
  created_at      DateTime @default(now())
  s3_key          String   // S3 key for the exported bundle
  s3_url          String   // Signed URL for download
  file_size       Int
  document_count  Int      // Number of documents in the bundle
  status          ExportStatus @default(PROCESSING)
  completed_at    DateTime?
  
  // Relations
  documents       ExportBundleItem[]
  
  // Indexes
  @@index([created_by])
  @@index([created_at])
  @@index([status])
}

model ExportBundleItem {
  id              String   @id @default(uuid())
  bundle_id       String
  document_id     String
  
  // Relations
  bundle          ExportBundle @relation(fields: [bundle_id], references: [id])
  document        GeneratedPDF @relation(fields: [document_id], references: [id])
  
  // Indexes
  @@index([bundle_id])
  @@index([document_id])
}

// Transaction Journaling (append-only)
model TransactionJournal {
  id         String   @id @default(uuid())
  tx_type    String
  entity_id  String
  payload    Json
  timestamp  DateTime @default(now())
  actor_id   String
  hash       String   // sha256(payload + timestamp)

  // Indexes
  @@index([tx_type])
  @@index([entity_id])
  @@index([actor_id])
  @@index([timestamp])
}

// Notification Log for Export Events
model NotificationLog {
  id          String   @id @default(uuid())
  event_type  String   // e.g., "export_completed", "sync_warning"
  event_data  Json     // Event-specific data
  user_id     String?  // User to notify (if applicable)
  created_at  DateTime @default(now())
  read_at     DateTime?
  is_read     Boolean  @default(false)
  
  // Indexes
  @@index([event_type])
  @@index([user_id])
  @@index([created_at])
  @@index([is_read])
}

// Enums for Cost Documentation

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Sync & Cross-Check Engine Models
model RawPayloadArchive {
  id          String   @id @default(uuid())
  source      String   // amazon, shopify, internal
  entity_id   String
  payload     Json
  fetched_at  DateTime @default(now())
  s3_key      String?

  @@index([source])
  @@index([entity_id])
  @@index([fetched_at])
}

model SnapshotState {
  id           String   @id @default(uuid())
  entity_id    String
  source       String   // system of record for this entity
  state        Json
  hash         String   // sha256 of canonicalized state
  created_at   DateTime @default(now())
  refreshed_at DateTime @default(now())

  @@unique([entity_id, source])
  @@index([hash])
}

model DiscrepancyStatus {
  id              String   @id @default(uuid())
  entity_id       String
  source          String
  is_in_sync      Boolean  @default(true)
  diff_summary    Json?
  last_checked_at DateTime @default(now())

  @@unique([entity_id, source])
  @@index([is_in_sync])
  @@index([last_checked_at])
}

enum JobPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum DocumentStatus {
  DRAFT
  LOCKED
  EXPORTED
  ARCHIVED
}

enum AuditEvent {
  CREATED
  UPDATED
  LOCKED
  EXPORTED
  REFRESHED
  SYNC_WARNING
}

enum ExportStatus {
  PROCESSING
  COMPLETED
  FAILED
} 