import puppeteer from 'puppeteer';
import Handlebars from 'handlebars';
import { logger } from '../utils/logger';
import { AnomalyEvidence, PDFTemplate, CostBreakdown, EvidenceSection, PDFGenerationOptions } from '../types/costDocumentation';

export class PDFGenerationService {
  private browser: puppeteer.Browser | null = null;
  private templates: Map<string, HandlebarsTemplateDelegate> = new Map();

  /**
   * Initialize the PDF generation service
   */
  async initialize(): Promise<void> {
    try {
      this.browser = await puppeteer.launch({
        headless: 'new',
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu'
        ]
      });
      logger.info('PDF Generation Service initialized successfully');
    } catch (error) {
      logger.error('Failed to initialize PDF Generation Service', { error });
      throw error;
    }
  }

  /**
   * Generate PDF from anomaly evidence
   */
  async generatePDF(
    evidence: AnomalyEvidence,
    template: PDFTemplate,
    options: PDFGenerationOptions = {}
  ): Promise<Buffer> {
    if (!this.browser) {
      throw new Error('PDF Generation Service not initialized');
    }

    try {
      // Compile template if not already compiled
      let compiledTemplate = this.templates.get(template.id);
      if (!compiledTemplate) {
        compiledTemplate = Handlebars.compile(template.template_html);
        this.templates.set(template.id, compiledTemplate);
      }

      // Prepare template data
      const templateData = this.prepareTemplateData(evidence, options);

      // Render HTML
      const html = compiledTemplate(templateData);

      // Generate PDF
      const page = await this.browser.newPage();
      await page.setContent(html, { waitUntil: 'networkidle0' });
      
      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '20mm',
          right: '20mm',
          bottom: '20mm',
          left: '20mm'
        }
      });

      await page.close();
      logger.info('PDF generated successfully', { anomaly_id: evidence.anomaly_id });

      return pdfBuffer;
    } catch (error) {
      logger.error('Failed to generate PDF', { error, anomaly_id: evidence.anomaly_id });
      throw error;
    }
  }

  /**
   * Prepare data for template rendering
   */
  private prepareTemplateData(evidence: AnomalyEvidence, options: PDFGenerationOptions) {
    const costBreakdown = this.calculateCostBreakdown(evidence);
    const evidenceSection = this.prepareEvidenceSection(evidence);
    
    return {
      anomaly: evidence,
      costBreakdown,
      evidenceSection,
      generatedAt: new Date().toISOString(),
      options,
      watermark: options.include_watermark ? 'Generated by Sack AI â€“ Automated Evidence Engine' : null
    };
  }

  /**
   * Calculate cost breakdown for the template
   */
  private calculateCostBreakdown(evidence: AnomalyEvidence): CostBreakdown[] {
    const breakdown: CostBreakdown[] = [];

    if (evidence.type === 'lost_units' && evidence.expected_units && evidence.received_units) {
      const lostUnits = evidence.expected_units - evidence.received_units;
      breakdown.push({
        item_description: `Lost Units - ${evidence.sku}`,
        quantity: lostUnits,
        unit_cost: evidence.cost_per_unit,
        total_cost: lostUnits * evidence.cost_per_unit,
        currency: 'USD'
      });
    } else if (evidence.type === 'overcharges') {
      breakdown.push({
        item_description: `Overcharge - ${evidence.sku}`,
        quantity: 1,
        unit_cost: evidence.total_loss,
        total_cost: evidence.total_loss,
        currency: 'USD'
      });
    } else if (evidence.type === 'damaged_stock') {
      breakdown.push({
        item_description: `Damaged Stock - ${evidence.sku}`,
        quantity: evidence.loss || 1,
        unit_cost: evidence.cost_per_unit,
        total_cost: evidence.total_loss,
        currency: 'USD'
      });
    }

    return breakdown;
  }

  /**
   * Prepare evidence section for the template
   */
  private prepareEvidenceSection(evidence: AnomalyEvidence): EvidenceSection {
    return {
      title: 'Supporting Evidence',
      description: `Evidence collected for ${evidence.type} anomaly on ${evidence.sku}`,
      links: evidence.evidence_links,
      embedded_content: this.formatEvidenceLinks(evidence.evidence_links)
    };
  }

  /**
   * Format evidence links for display
   */
  private formatEvidenceLinks(links: string[]): string {
    return links.map((link, index) => {
      const fileName = link.split('/').pop() || `Evidence-${index + 1}`;
      return `<a href="${link}" target="_blank">${fileName}</a>`;
    }).join('<br>');
  }

  /**
   * Get default template for anomaly type
   */
  getDefaultTemplate(anomalyType: string): string {
    const templates = {
      lost_units: this.getLostUnitsTemplate(),
      overcharges: this.getOverchargesTemplate(),
      damaged_stock: this.getDamagedStockTemplate(),
      incorrect_fee: this.getIncorrectFeeTemplate(),
      duplicate_charge: this.getDuplicateChargeTemplate(),
      pricing_discrepancy: this.getPricingDiscrepancyTemplate()
    };

    return templates[anomalyType] || templates.lost_units;
  }

  /**
   * Default template for lost units
   */
  private getLostUnitsTemplate(): string {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Cost Documentation - Lost Units</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
          .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
          .section { margin-bottom: 30px; }
          .section-title { font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #333; }
          .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }
          .info-item { padding: 10px; background: #f5f5f5; border-radius: 5px; }
          .info-label { font-weight: bold; color: #666; }
          .cost-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          .cost-table th, .cost-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
          .cost-table th { background: #f5f5f5; font-weight: bold; }
          .total-row { font-weight: bold; background: #e8f5e8; }
          .evidence-section { background: #f9f9f9; padding: 20px; border-radius: 5px; }
          .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Cost Documentation Report</h1>
          <h2>{{anomaly.type}} Anomaly</h2>
          <p>Generated on {{generatedAt}}</p>
        </div>

        <div class="section">
          <div class="section-title">Anomaly Details</div>
          <div class="info-grid">
            <div class="info-item">
              <div class="info-label">Anomaly ID:</div>
              <div>{{anomaly.anomaly_id}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">SKU:</div>
              <div>{{anomaly.sku}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">Detection Date:</div>
              <div>{{anomaly.detected_at}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">Anomaly Type:</div>
              <div>{{anomaly.type}}</div>
            </div>
          </div>
        </div>

        <div class="section">
          <div class="section-title">Cost Breakdown</div>
          <table class="cost-table">
            <thead>
              <tr>
                <th>Item Description</th>
                <th>Quantity</th>
                <th>Unit Cost</th>
                <th>Total Cost</th>
              </tr>
            </thead>
            <tbody>
              {{#each costBreakdown}}
              <tr>
                <td>{{item_description}}</td>
                <td>{{quantity}}</td>
                <td>${{unit_cost}}</td>
                <td>${{total_cost}}</td>
              </tr>
              {{/each}}
              <tr class="total-row">
                <td colspan="3">Total Loss:</td>
                <td>${{anomaly.total_loss}}</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div class="section">
          <div class="section-title">Evidence</div>
          <div class="evidence-section">
            <p><strong>{{evidenceSection.title}}</strong></p>
            <p>{{evidenceSection.description}}</p>
            <div>{{{evidenceSection.embedded_content}}}</div>
          </div>
        </div>

        {{#if watermark}}
        <div class="footer">
          <p>{{watermark}}</p>
        </div>
        {{/if}}
      </body>
      </html>
    `;
  }

  /**
   * Default template for overcharges
   */
  private getOverchargesTemplate(): string {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Cost Documentation - Overcharges</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
          .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
          .section { margin-bottom: 30px; }
          .section-title { font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #333; }
          .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }
          .info-item { padding: 10px; background: #f5f5f5; border-radius: 5px; }
          .info-label { font-weight: bold; color: #666; }
          .cost-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          .cost-table th, .cost-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }
          .cost-table th { background: #f5f5f5; font-weight: bold; }
          .total-row { font-weight: bold; background: #e8f5e8; }
          .evidence-section { background: #f9f9f9; padding: 20px; border-radius: 5px; }
          .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Cost Documentation Report</h1>
          <h2>{{anomaly.type}} Anomaly</h2>
          <p>Generated on {{generatedAt}}</p>
        </div>

        <div class="section">
          <div class="section-title">Anomaly Details</div>
          <div class="info-grid">
            <div class="info-item">
              <div class="info-label">Anomaly ID:</div>
              <div>{{anomaly.anomaly_id}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">SKU:</div>
              <div>{{anomaly.sku}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">Detection Date:</div>
              <div>{{anomaly.detected_at}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">Anomaly Type:</div>
              <div>{{anomaly.type}}</div>
            </div>
          </div>
        </div>

        <div class="section">
          <div class="section-title">Cost Breakdown</div>
          <table class="cost-table">
            <thead>
              <tr>
                <th>Item Description</th>
                <th>Quantity</th>
                <th>Unit Cost</th>
                <th>Total Cost</th>
              </tr>
            </thead>
            <tbody>
              {{#each costBreakdown}}
              <tr>
                <td>{{item_description}}</td>
                <td>{{quantity}}</td>
                <td>${{unit_cost}}</td>
                <td>${{total_cost}}</td>
              </tr>
              {{/each}}
              <tr class="total-row">
                <td colspan="3">Total Overcharge:</td>
                <td>${{anomaly.total_loss}}</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div class="section">
          <div class="section-title">Evidence</div>
          <div class="evidence-section">
            <p><strong>{{evidenceSection.title}}</strong></p>
            <p>{{evidenceSection.description}}</p>
            <div>{{{evidenceSection.embedded_content}}}</div>
          </div>
        </div>

        {{#if watermark}}
        <div class="footer">
          <p>{{watermark}}</p>
        </div>
        {{/if}}
      </body>
      </html>
    `;
  }

  /**
   * Default template for damaged stock
   */
  private getDamagedStockTemplate(): string {
    return this.getLostUnitsTemplate(); // Reuse lost units template
  }

  /**
   * Default template for incorrect fees
   */
  private getIncorrectFeeTemplate(): string {
    return this.getOverchargesTemplate(); // Reuse overcharges template
  }

  /**
   * Default template for duplicate charges
   */
  private getDuplicateChargeTemplate(): string {
    return this.getOverchargesTemplate(); // Reuse overcharges template
  }

  /**
   * Default template for pricing discrepancies
   */
  private getPricingDiscrepancyTemplate(): string {
    return this.getOverchargesTemplate(); // Reuse overcharges template
  }

  /**
   * Cleanup resources
   */
  async cleanup(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
    this.templates.clear();
    logger.info('PDF Generation Service cleaned up');
  }
}








