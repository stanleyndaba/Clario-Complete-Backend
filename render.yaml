# ðŸš€ Render.com Deployment Configuration
# Complete microservices deployment with Supabase integration

services:
  # Main API (Python/FastAPI) - Central Orchestrator
  - type: web
    name: opside-main-api
    env: python
    region: oregon
    plan: free
    buildCommand: |
      pip install -r requirements.txt
    startCommand: python -m uvicorn src.app:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: ENV
        value: production
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        generateValue: true
      - key: SUPABASE_URL
        value: https://fmzfjhrwbkebqaxjlvzt.supabase.co
      - key: SUPABASE_ANON_KEY
        value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBh...
      - key: SUPABASE_SERVICE_ROLE_KEY
        value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBh...
      - key: INTEGRATIONS_URL
        value: https://opside-integrations-backend.onrender.com
      - key: AMAZON_SPAPI_BASE_URL
        value: https://opside-integrations-backend.onrender.com
      - key: STRIPE_SERVICE_URL
        value: https://opside-stripe-payments.onrender.com
      - key: COST_DOC_SERVICE_URL
        value: https://opside-cost-docs.onrender.com
      - key: REFUND_ENGINE_URL
        value: https://opside-refund-engine.onrender.com
      - key: OPTIONAL_SERVICES
        value: integrations,stripe,cost-docs,refund-engine
      - key: FRONTEND_URL
        value: https://opside-complete-frontend.onrender.com
      - key: ALLOWED_ORIGINS
        value: https://opside-complete-frontend.onrender.com
      - key: ALLOWED_ORIGIN_REGEX
        value: ^https:\/\/.*opside-complete-frontend\.onrender\.com$
      - key: SQLITE_DB_PATH
        value: /tmp/opside.db

  # Integrations Backend (Node.js/Express) - Amazon SP-API
  - type: web
    name: opside-integrations-backend
    env: node
    region: oregon
    plan: free
    buildCommand: |
      cd Integrations-backend
      npm ci
      npm run build
    startCommand: cd Integrations-backend && npm start
    healthCheckPath: /health
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3001
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET
      - key: SUPABASE_URL
        value: https://fmzfjhrwbkebqaxjlvzt.supabase.co
      - key: SUPABASE_ANON_KEY
        value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBh...
      - key: SUPABASE_SERVICE_ROLE_KEY
        value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBh...
      - key: AMAZON_CLIENT_ID
        value: your-amazon-client-id
      - key: AMAZON_CLIENT_SECRET
        value: your-amazon-client-secret
      - key: AMAZON_SPAPI_CLIENT_ID
        value: your-amazon-client-id
      - key: AMAZON_SPAPI_CLIENT_SECRET
        value: your-amazon-client-secret
      - key: AMAZON_SPAPI_REFRESH_TOKEN
        value: your-amazon-refresh-token
      - key: AMAZON_REDIRECT_URI
        value: https://opside-integrations-backend.onrender.com/api/amazon/callback
      - key: FRONTEND_URL
        value: https://your-frontend-domain.com

  # Stripe Payments (Node.js/Express) - Payment Processing
  - type: web
    name: opside-stripe-payments
    env: node
    region: oregon
    plan: free
    buildCommand: |
      cd stripe-payments
      npm ci
      npm run build
    startCommand: cd stripe-payments && npm start
    healthCheckPath: /health
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 4000
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET
      - key: SUPABASE_URL
        value: https://fmzfjhrwbkebqaxjlvzt.supabase.co
      - key: SUPABASE_ANON_KEY
        value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBh...
      - key: SUPABASE_SERVICE_ROLE_KEY
        value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBh...
      - key: STRIPE_SECRET_KEY
        value: sk_live_...
      - key: STRIPE_WEBHOOK_SECRET
        value: whsec_...
      - key: STRIPE_PUBLISHABLE_KEY
        value: pk_live_...

  # Cost Documentation API (Node.js/Express)
  - type: web
    name: opside-cost-docs
    env: node
    region: oregon
    plan: free
    buildCommand: |
      cd "FBA Refund Predictor/cost-documentation-module"
      npm ci
      npm run build
    startCommand: cd "FBA Refund Predictor/cost-documentation-module" && npm start
    healthCheckPath: /health
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3003
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET

  # Refund Engine (Node.js/Express)
  - type: web
    name: opside-refund-engine
    env: node
    region: oregon
    plan: free
    buildCommand: |
      cd "FBA Refund Predictor/refund-engine"
      npm ci
      npm run build
    startCommand: cd "FBA Refund Predictor/refund-engine" && npm start
    healthCheckPath: /health
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3002
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET

  # MCDE (Python/FastAPI)
  - type: web
    name: opside-mcde
    env: python
    region: oregon
    plan: free
    buildCommand: |
      cd "FBA Refund Predictor/mcde"
      pip install -r requirements.txt
    startCommand: cd "FBA Refund Predictor/mcde" && python -m uvicorn src.main:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PORT
        value: 8000
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET

  # Claim Detector (Python/FastAPI)
  - type: web
    name: opside-claim-detector
    env: python
    region: oregon
    plan: free
    buildCommand: |
      cd "Claim Detector Model/claim_detector"
      pip install -r requirements.txt
    startCommand: cd "Claim Detector Model/claim_detector" && python -m uvicorn src.main:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PORT
        value: 8001
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET

  # Evidence Engine (Python/FastAPI)
  - type: web
    name: opside-evidence-engine
    env: python
    region: oregon
    plan: free
    buildCommand: |
      cd evidence-engine
      pip install -r requirements.txt
    startCommand: cd evidence-engine && python -m uvicorn src.evidence.evidence_engine:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PORT
        value: 8002
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET

  # Smart Inventory Sync (Node.js/Express)
  - type: web
    name: opside-smart-inventory-sync
    env: node
    region: oregon
    plan: free
    buildCommand: |
      cd "Integrations-backend/opsided-backend/smart-inventory-sync"
      npm ci
      npm run build
    startCommand: cd "Integrations-backend/opsided-backend/smart-inventory-sync" && npm start
    healthCheckPath: /health
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3004
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET

  # Test Service (Python/FastAPI)
  - type: web
    name: opside-test-service
    env: python
    region: oregon
    plan: free
    buildCommand: |
      cd test-service
      pip install -r requirements.txt
    startCommand: cd test-service && python -m uvicorn test_service:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PORT
        value: 8003
      - key: DATABASE_URL
        fromDatabase:
          name: opside-postgres
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: opside-redis
          property: connectionString
      - key: JWT_SECRET
        fromService:
          type: web
          name: opside-main-api
          envVarKey: JWT_SECRET

# Database
databases:
  - name: opside-postgres
    databaseName: opside
    user: opside_user
    plan: free

# Redis Cache
services:
  - type: redis
    name: opside-redis
    plan: free
    region: oregon


